Section 1 - Lecture 6
1) Install .NET Core by navigating to https://www.microsoft.com/net/download/windows
2) Command Palet: Shift + Control + P
3) Select "Install Extensions"
4) Install "Angular v5 Snippets" - Helps Create Angular Component or Service using a snippet
5) Install "ASP.NET Helper"
6) Install "ASP.NET Core Snippets"
7) Install "Auto Import" - Auto-generates import statements for TypeScript and import classes
8) Install "Beautify" - Formats javascript and html code
9) Install "C#" - Syntax Highlighting and Code Completion
10) Install "C# Extensions" - Syntax Highlighting Completion
11) Install "Docker" - Syntax Highlighting for Docker files
12) Install "mssql" - Allows for connection to sql server database to write queries
13) Install "REST Client" - Call restful endpoints
14) Install Node JS at https://nodejs.org/en/
15) Execute command "npm install -g dotnet new angular"
16) Install SQL Server Express
Database Details:
Instance Name - SQLEXPRESS
SQL Administrators - NA-IDM\217216X718010
Features Installed - SQLENGINE
Version - 14.0.1000.169, RTM
Connection String - Server=localhost\SQLEXPRESS;Database=master;Trusted_Connection=True;
SQL Server Install Log Folder - C:\Program Files\Microsoft SQL Server\140\Setup Bootstrap\Log\20180403_215545
Installation Media Folder - C:\SQLServer2017Media\Express_ENU
Installation Resources Folder - C:\Program Files\Microsoft SQL Server\140\SSEI\Resources
User: sa
Pass: MyComplexPassword!234
17) Install SQL Server Management Studio
18) Execute the following command in SSMS 
ALTER LOGIN sa ENABLE ;  
GO  
ALTER LOGIN sa WITH PASSWORD = 'MyComplexPassword!234' ;  
GO  

Section 1 - Lecture 7
1) Docker - Automates the deployment of applications
2) Packages the App + Dependencies + Configs into an image and then deploys them into a container on a server

Section 1 - Lecture 8
1) Execute command "dotnet new angular" in project directory
2) Execute command "npm install"
3) Run project by executing command "dotnet run" in the VS Code terminal or in the linux terminal
4) Stop process with Control + C
5) Open Visual Studio Code from Command Prompt with "Code .". First, navigate to the command palet and type in command. Select the option that adds code to path.
6) Navigate to the terminal in VS Code by using hotkey combination "Ctrl + `"

Section 1 - Lecture 9
1) ClientApp folder - Angular client-side code
2) wwwroot - public assets for applications. This is the only folder whose contents are whitelisted.
2a) Includes a file called main-client.js which is a compilation of all angular applications in javascript.
2b) Includes a file called vendor.js which is a compilation of all third-party libraries.
2c) Includes a file called vendor.cs which is a compilation of all third-party css style sheets.
3) appsettings.json - stores application settings
4) web.config - used for configuration of Installation
5) .csproj - used for opening project in visual Studio
6) webpack.config.js - a bundler for client-side code. It compiles and minifies  all javascript and style sheet files.
7) webpack.config.vendor.js - Compiles all third-party libraries.

Section 1 - Lecture 10
1) Kestrel - In-process HTTP server implementation for cross-platform application support running with ASP.NET Core.
2) Main Method -  BuildWebHost(args).Run(); tells Kestrel to start listening for requests on port 5000 of localhost.
3) Dependency Injection - Registers default implemenation for all of the interfaces being used through services.AddTransient<Interface,Implementation>(); in ConfigureServices method found in class Startup.cs.
4) Request Processing Pipeline - request comes to middleware and the middleware determines if it wants to take action on the request.
Now we can determine what middleware we want to utilize, so that we can improve the performance of our application.
5) In the Configure method in the Startup class, if you are the a development environment "UseDeveloperExceptionPage" will render an exception 
page with all the appropriate details for debugging if an invalid request comes in. "UseWebpackDevMiddleware" allows for client-side changes to be automatically pushed to the browser.
"UseStaticFiles" allows for the application to serve static files to the end-user. "UseMvc" forwards request to an action in our controller.

Section 1 - Lecture 11
1) In .NET Core there is a concept of the following environments: Development, Staging, Production
2) Change environment by executing the command "set ASPNETCORE_ENVIRONMENT="Development"". Ensure that this is added at the system level as an environment variable.

Section 1 -  Lecture 12
1) Add .NET Watch as a csproj reference:
 <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0-preview2-final" />
 </ItemGroup>
2) Execute the command "dotnet restore" - re-pulls nuget Packages
3) Execute the command "dotnet watch run" - this allows dynamic server side compiling

Section 1 - Lecture 13
1) Shift + Ctrl + D = Takes users to debug panel in VS Code

Section 1 - Lecture 14
1) Shift + Ctrl + G = Takes users to GIT panel in VS Code

Section 1 - Lecture 15
1) Proper Requirements:
2) Use Cases - Show interactions between user and system
3) Dependency Graph - Shows dependent functionality, so one knows what to build first

Section 1 - Lecture 16
1) Add nuget package for entity framework core for sql server by executing command "dotnet add package Microsoft.EntityFrameworkCore.SqlServer"
2) Add nuget package for entity framework CLI by adding the following reference to the csproj:
<ItemGroup>
    <DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.0-preview2-final" />
</ItemGroup>
3) Perform the following command "dotnet ef migrations --help" to view different entity framework commands

Section 2 - Lecture 20
1) In EF6, to create a foreign key, one must create a property that references the table. The property name should be the same as the data type. The foreign key
will have the same name as the previous property and the name of the primary key. Entity framework will then generate this constraint.

Section 2 - Lecture 21
1) Execute the command "dotnet add package Microsoft.EntityFrameworkCore.SqlServer"
2) To add CLI tools for Entity Framework add the following to your .csproj file:
<ItemGroup>
    <DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.0-preview2-final" />
</ItemGroup>

Section 2 - Lecture 22
1) Create a DbContext class
2) Register the class for dependency injection - services.AddDbContext<VegaDbContext>(options => options.UseSqlServer(Configuration.GetConnectionString("Default")));

Section 2 - Lecture 23
1) To set the connection string, open appsettings.json and insert the following:
  "ConnectionStrings":{
    "Default": "server=localhost\\SQLEXPRESS;database=Vega;user id=sa;password=MyComplexPassword!234"
  },
2) appsettings.json is the new config file in ASP.NET Core. There is no web.config file.
3) Configuration.GetConnectionString("Default") will look in the ConnectionStrings element for the Name "Default" value.

Section 2 - Lecture 24
1) Add package by executing command "dotnet add package Microsoft.EntityFrameworkCore.Design"
2) Make sure you restore all dependencies with "dotnet restore"
3) Create a migration by executing the command "dotnet ef migrations add InitialModel"
4) Need to add a DBSet to EF DbContext in order for Up/Down Migration to contain data
5) Remove the latest migration by executing the command "dotnet ef migrations remove"
6) Entity Framework looks at the ASP.NET Core dependency injection for the correct DB to connect to in order to verify that the migration was not applied yet, so that it
can proceed with removing those items from the file.
7) Add migrations to the database by executing the command "dotnet ef database update"

Section 2 - Lecture 25
1) By executing the command "dotnet ef database update MigrationName", you can downgrade the database to a specific migration.
2) After downgrading the database, you can then remove the unapplied migrations by executing the command "dotnet ef migrations remove".
3) Add constraints by adding attributes to the model properties and then execute "dotnet ef migrations add ApplyConstraints"

Section 2 - Lecture 26
1) To seed the database with code-first migrations execute the command "dotnet ef migrations add SeedDatabase"
2) From this point, you can modify the migration script

Section 3 - Lecture 27
1) In ASP.NET Core you only have 1 controller class. In MVC5, you have two types of controllers: 1 for returning views and another for APIs

Section 3 - Lecture 29
1) The model classes in the solution are known as "implementation detail" within our application domain. We need a contract/interfact at our
"application boundary" to interact with external components.
2) These "application boundary" classes will be taken as an input into the controller and the output will be serialized.

Section 3 - Lecture 30
1) Map domain classes to API resources
2) AutoMapper - Convention-based mapping tool for mapping two different objects together.
3) Install by executing the command "dotnet add package AutoMapper"
4) Install by executing the command "dotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection --version 1.2.0"
5) Add dependency injection for AutoMapper by adding "" to ConfigureServices method
6) AutoMapper needs a mapping profile to map properties between objects

Section 3 - Lecture 33
1) Execute command "npm install @angular/cli@latest -g"
2) Create new angular project with angular cli by executing the command "ng new hello-world"
3) Move the .angular-cli.json into the project directory
4) Alter the the value for the root key to "ClientApp" because that is where the Angular app resides
5) Install the Angular CLI as a dev dependency by executing the command "npm install @angular/cli@latest --save-dev"
6) Generate a new Angular component by executing the command "ng g component vehicle-form --module=app.module" from the components folder

Section 3 - Lecture 34
1) How to create a component manually:
1a) Create a folder in "ClientApp\app\components" and create a typescript file with an associated html file.
1b) Register the component in app.module.ts and add the component to the declarations and RouterModule.
2) How to create a component automatically:
2a) Get the latest cli by executing command "npm install @angular/cli@latest -g"
2b) Create new project by executing "ng new hello-world"
2c) Copy the Angular CLI json by navigating to the project destination and executing the following command "cp .angular-cli.json ../<Project_Name>"


